const router = require('express').Router();

const {
    getMultipleEndpoints,
    createMultipleEndpoints,
    updateMultipleEndpoints,
    deleteMultipleEndpoints
} = require('./multipleEndpoints');

const {
    getSingleEndpoint,
    createSingleEndpoint,
    updateSingleEndpoint,
    deleteSingleEndpoint
} = require('./singleEndpoint');

/**
 * @swagger
 * components:
 *      schemas:
 *          Endpoint:
 *              type: object
 *              required:
 *                  - endpoint
 *                  - type
 *                  - category
 *                  - subcategory
 *              properties:
 *                  id:
 *                      type: string
 *                      description: autogenerated value
 *                  endpoint:
 *                      type: string
 *                      description: the actual value that will be checked during access checking
 *                  type:
 *                      type: string
 *                      description: the type of endpoint
 *                  category:
 *                      type: string
 *                      description: the group where this type belong
 *                  subcategory:
 *                      type: string
 *                      description: the subgroup where this type and category belong
 *                  description:
 *                      type: string
 *                      description: discribes the endpoint
 *                  createdAt:
 *                      type: string
 *                      description: date when this item was created
 *                  updatedAt:
 *                      type: string
 *                      description: date when this item was updated
 *              example:
 *                  id: db422ca5-b0a0-43b1-9381-417be994f08e
 *                  endpoint: /api/v1/endpoints/new
 *                  type: server
 *                  category: route
 *                  subcategory: POST
 *                  description: create a single endpoint
 *                  createdAt: 2021-11-08T06:19:31.163Z
 *                  updatedAt: 2021-11-08T08:11:11.815Z
 */

/**
 * @swagger
 * tags:
 *      name: Endpoints
 *      description: API to manage the endpoints
 */

// routes for handling batch data
/**
 * @swagger
 * /api/v1/endpoints:
 *      get:
 *          tags: [Endpoints]
 *          summary: Returns multiple endpoint in paginated manner
 *          parameters:
 *              - in: query
 *                name: pageSize
 *                schema:
 *                      type: number
 *                description: number of items per page 
 *              - in: query
 *                name: pageNumber
 *                schema:
 *                      type: number
 *                description: current page number
 *          responses:
 *              200:
 *                  description: object containing a list of endpoints
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      type: object
 *                                      properties:
 *                                          next:
 *                                              type: string
 *                                              nullable: true
 *                                              description: url pointing to the next page
 *                                          pageSize:
 *                                              type: number
 *                                              description: number of items per page
 *                                          pageNumber:
 *                                              type: number
 *                                              description: the current page number
 *                                          totalPage:
 *                                              type: number
 *                                              description: all the availbale pages
 *                                          totalItems:
 *                                              type: number
 *                                              description: all items in all pages
 *                                          items:
 *                                              type: array
 *                                              items:
 *                                                  $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.get('/endpoints', getMultipleEndpoints)

/**
 * @swagger
 * /api/v1/endpoints:
 *      post:
 *          tags: [Endpoints]
 *          summary: Create a new endpoints
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: array
 *                          items:
 *                              type: object
 *                              required:
 *                                  - endpoint
 *                                  - type
 *                                  - category
 *                                  - subcategory
 *                              properties:
 *                                  endpoint:
 *                                      type: string
 *                                  type:
 *                                      type: string
 *                                  category:
 *                                      type: string
 *                                  subcategory:
 *                                      type: string
 *                                  description:
 *                                      type: string
 *          responses:
 *              200:
 *                  description: return endpoints
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      type: array
 *                                      items:
 *                                          $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.post('/endpoints', createMultipleEndpoints)

/**
 * @swagger
 * /api/v1/endpoints:
 *      put:
 *          tags: [Endpoints]
 *          summary: Update endpoints
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: array
 *                          items:
 *                              type: object
 *                              properties:
 *                                  id:
 *                                      type: string
 *                                  endpoint:
 *                                      type: string
 *                                  type:
 *                                      type: string
 *                                  category:
 *                                      type: string
 *                                  subcategory:
 *                                      type: string
 *                                  description:
 *                                      type: string
 *          responses:
 *              200:
 *                  description: return updated endpoints
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      type: array
 *                                      items:
 *                                          oneOf:
 *                                              - type: object
 *                                                properties:
 *                                                    id:
 *                                                        type: string
 *                                                    error:
 *                                                        type: string
 *                                              - $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.put('/endpoints', updateMultipleEndpoints)

/**
 * @swagger
 * /api/v1/endpoints:
 *      delete:
 *          tags: [Endpoints]
 *          summary: Delete endpoints
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: array
 *                          items:
 *                              type: object
 *                              properties:
 *                                  id:
 *                                      type: string
 *          responses:
 *              200:
 *                  description: return deleted endpoints
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      type: array
 *                                      items:
 *                                          $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.delete('/endpoints', deleteMultipleEndpoints)

// routes for handling single data
/**
 * @swagger
 * /api/v1/endpoints/{id}:
 *      get:
 *          tags: [Endpoints]
 *          summary: Returns a single endpoint with id equivalent to url parameter
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                      type: string
 *                required: true
 *                description: id of endpoint
 *          responses:
 *              200:
 *                  description: returns endpoint
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 *              404:
 *                  description: None existing data
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.get('/endpoints/:id', getSingleEndpoint)

/**
 * @swagger
 * /api/v1/endpoints/new:
 *      post:
 *          tags: [Endpoints]
 *          summary: Create a new endpoint
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          required:
 *                              - endpoint
 *                              - type
 *                              - category
 *                              - subcategory
 *                          properties:
 *                              endpoint:
 *                                  type: string
 *                              type:
 *                                  type: string
 *                              category:
 *                                  type: string
 *                              subcategory:
 *                                  type: string
 *                              description:
 *                                  type: string
 *                          example:
 *                              endpoint: /api/v1/endpoints/new
 *                              type: server
 *                              category: route
 *                              subcategory: POST
 *                              description: create a single endpoint
 *          responses:
 *              200:
 *                  description: returns endpoint
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.post('/endpoints/new', createSingleEndpoint)

/**
 * @swagger
 * /api/v1/endpoints/{id}:
 *      put:
 *          tags: [Endpoints]
 *          summary: Update endpoint
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                      type: string
 *                required: true
 *                description: id of endpoint
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          properties:
 *                              endpoint:
 *                                  type: string
 *                              type:
 *                                  type: string
 *                              category:
 *                                  type: string
 *                              subcategory:
 *                                  type: string
 *                              description:
 *                                  type: string
 *                          example:
 *                              endpoint: /api/v1/endpoints/new
 *                              type: server
 *                              category: route
 *                              subcategory: POST
 *                              description: create a single endpoint
 *          responses:
 *              200:
 *                  description: returns the updated endpoint
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 *              404:
 *                  description: None existing data
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.put('/endpoints/:id', updateSingleEndpoint)

/**
 * @swagger
 * /api/v1/endpoints/{id}:
 *      delete:
 *          tags: [Endpoints]
 *          summary: Delete endpoint
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                      type: string
 *                required: true
 *                description: id of endpoint
 *          responses:
 *              200:
 *                  description: returns the endpoint
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Endpoint'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 *              404:
 *                  description: None existing data
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.delete('/endpoints/:id', deleteSingleEndpoint)

module.exports = router