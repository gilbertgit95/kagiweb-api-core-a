const router = require('express').Router();

const {
    getMultipleRoles
} = require('./multipleRoles');

const {
    getSingleRole,
    createSingleRole,
    updateSingleRole,
    deleteSingleRole
} = require('./singleRole');

/**
 * @swagger
 * components:
 *      schemas:
 *          Role:
 *              type: object
 *              required:
 *                  - name
 *              properties:
 *                  id:
 *                      type: string
 *                      description: autogenerated value
 *                  name:
 *                      type: string
 *                      description: role display name
 *                  description:
 *                      type: string
 *                      description: discribes the role
 *                  createdAt:
 *                      type: string
 *                      description: date when this item was created
 *                  updatedAt:
 *                      type: string
 *                      description: date when this item was updated
 *              example:
 *                  id: 4a21f627-9455-4920-ac8f-550d91b752bc
 *                  name: Normal user
 *                  description: Has access to some major endpoints
 *                  createdAt: 2021-11-20T15:30:48.794Z
 *                  updatedAt: 2021-11-20T15:30:48.794Z
 */

/**
 * @swagger
 * tags:
 *      name: Roles
 *      description: API to manage the roles
 */

/**
 * @swagger
 * /api/v1/roles:
 *      get:
 *          tags: [Roles]
 *          summary: Returns roles in paginated manner
 *          parameters:
 *              - in: query
 *                name: pageSize
 *                schema:
 *                      type: number
 *                description: number of items per page 
 *              - in: query
 *                name: pageNumber
 *                schema:
 *                      type: number
 *                description: current page number
 *          responses:
 *              200:
 *                  description: object containing a list of roles
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      type: object
 *                                      properties:
 *                                          next:
 *                                              type: string
 *                                              nullable: true
 *                                              description: url pointing to the next page
 *                                          pageSize:
 *                                              type: number
 *                                              description: number of items per page
 *                                          pageNumber:
 *                                              type: number
 *                                              description: the current page number
 *                                          totalPage:
 *                                              type: number
 *                                              description: all the availbale pages
 *                                          totalItems:
 *                                              type: number
 *                                              description: all items in all pages
 *                                          items:
 *                                              type: array
 *                                              items:
 *                                                  $ref: '#/components/schemas/Role'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.get('/roles', getMultipleRoles)

/**
 * @swagger
 * /api/v1/roles/{id}:
 *      get:
 *          tags: [Roles]
 *          summary: Returns a role with id equivalent to url parameter
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                      type: string
 *                required: true
 *                description: id of role
 *          responses:
 *              200:
 *                  description: returns role
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Role'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 *              404:
 *                  description: None existing data
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.get('/roles/:id', getSingleRole)

/**
 * @swagger
 * /api/v1/roles/new:
 *      post:
 *          tags: [Roles]
 *          summary: Create a new role
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          required:
 *                              - name
 *                          properties:
 *                              name:
 *                                  type: string
 *                              description:
 *                                  type: string
 *                          example:
 *                              name: Client
 *                              description: Has access to only minor endpoints
 *          responses:
 *              200:
 *                  description: returns the newly created role
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Role'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.post('/roles/new', createSingleRole)

/**
 * @swagger
 * /api/v1/roles/{id}:
 *      put:
 *          tags: [Roles]
 *          summary: Update role
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                      type: string
 *                required: true
 *                description: id of role
 *          requestBody:
 *              required: true
 *              content:
 *                  application/json:
 *                      schema:
 *                          type: object
 *                          properties:
 *                              name:
 *                                  type: string
 *                              description:
 *                                  type: string
 *                          example:
 *                              name: Client
 *                              description: Has access to only minor endpoints
 *          responses:
 *              200:
 *                  description: returns the updated role
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Role'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 *              404:
 *                  description: None existing data
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.put('/roles/:id', updateSingleRole)

/**
 * @swagger
 * /api/v1/roles/{id}:
 *      delete:
 *          tags: [Roles]
 *          summary: Delete role
 *          parameters:
 *              - in: path
 *                name: id
 *                schema:
 *                      type: string
 *                required: true
 *                description: id of endpoint
 *          responses:
 *              200:
 *                  description: returns the deleted role
 *                  content:
 *                      application/json:
 *                          schema:
 *                              type: object
 *                              properties:
 *                                  data:
 *                                      $ref: '#/components/schemas/Role'
 *              500:
 *                  description: Some error occured in the server
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 *              404:
 *                  description: None existing data
 *                  content:
 *                      application/json:
 *                          schema:
 *                              $ref: '#/components/schemas/Error'
 */
router.delete('/roles/:id', deleteSingleRole)

module.exports = router